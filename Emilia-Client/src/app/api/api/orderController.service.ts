/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';

import {Observable} from 'rxjs';

import {OrderForm} from '../model/orderForm';
import {OrderReq} from '../model/orderReq';
import {OrderRes} from '../model/orderRes';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class OrderControllerService {

  protected basePath = 'http://localhost:8080';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


  /**
   * acceptOrder
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public acceptOrderUsingPUT(body?: OrderReq, observe?: 'body', reportProgress?: boolean): Observable<string>;
  public acceptOrderUsingPUT(body?: OrderReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
  public acceptOrderUsingPUT(body?: OrderReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
  public acceptOrderUsingPUT(body?: OrderReq, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<string>('put', `${this.basePath}/api/orders/accept-order`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * cancelOrder
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public cancelOrderUsingPUT(body?: OrderReq, observe?: 'body', reportProgress?: boolean): Observable<string>;
  public cancelOrderUsingPUT(body?: OrderReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
  public cancelOrderUsingPUT(body?: OrderReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
  public cancelOrderUsingPUT(body?: OrderReq, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

    return this.httpClient.request<string>('put', `${this.basePath}/api/orders/cancel-order`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * create
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createUsingPOST(body?: OrderForm, observe?: 'body', reportProgress?: boolean): Observable<OrderRes>;
  public createUsingPOST(body?: OrderForm, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderRes>>;
  public createUsingPOST(body?: OrderForm, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderRes>>;
  public createUsingPOST(body?: OrderForm, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

    return this.httpClient.request<OrderRes>('post', `${this.basePath}/api/orders`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
    }

    /**
     * deleteOrder
     *
     * @param orderId orderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrderUsingDELETE(orderId: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public deleteOrderUsingDELETE(orderId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public deleteOrderUsingDELETE(orderId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public deleteOrderUsingDELETE(orderId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling deleteOrderUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

      return this.httpClient.request<string>('delete', `${this.basePath}/api/orders/${encodeURIComponent(String(orderId))}`,
        {
          withCredentials: this.configuration.withCredentials,
          headers: headers,
          observe: observe,
          reportProgress: reportProgress
        }
      );
    }

  /**
   * deliverOrder
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deliverOrderUsingPUT(body?: OrderReq, observe?: 'body', reportProgress?: boolean): Observable<string>;
  public deliverOrderUsingPUT(body?: OrderReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
  public deliverOrderUsingPUT(body?: OrderReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
  public deliverOrderUsingPUT(body?: OrderReq, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<string>('put', `${this.basePath}/api/orders/deliver-order`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * getAllOrdersByCustomerId
   *
   * @param customerId customerId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllOrdersByCustomerIdUsingGET(customerId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<OrderRes>>;
  public getAllOrdersByCustomerIdUsingGET(customerId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrderRes>>>;
  public getAllOrdersByCustomerIdUsingGET(customerId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrderRes>>>;
  public getAllOrdersByCustomerIdUsingGET(customerId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (customerId === null || customerId === undefined) {
      throw new Error('Required parameter customerId was null or undefined when calling getAllOrdersByCustomerIdUsingGET.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

    return this.httpClient.request<Array<OrderRes>>('get', `${this.basePath}/api/orders/customer/${encodeURIComponent(String(customerId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * getAllOrdersByOrderStatus
   *
   * @param orderStatus orderStatus
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllOrdersByOrderStatusUsingGET(orderStatus: string, observe?: 'body', reportProgress?: boolean): Observable<Array<OrderRes>>;
  public getAllOrdersByOrderStatusUsingGET(orderStatus: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrderRes>>>;
  public getAllOrdersByOrderStatusUsingGET(orderStatus: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrderRes>>>;
  public getAllOrdersByOrderStatusUsingGET(orderStatus: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (orderStatus === null || orderStatus === undefined) {
      throw new Error('Required parameter orderStatus was null or undefined when calling getAllOrdersByOrderStatusUsingGET.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

    return this.httpClient.request<Array<OrderRes>>('get', `${this.basePath}/api/orders/status/${encodeURIComponent(String(orderStatus))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * getAllOrders
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllOrdersUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<OrderRes>>;
  public getAllOrdersUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrderRes>>>;
  public getAllOrdersUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrderRes>>>;
  public getAllOrdersUsingGET(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

    return this.httpClient.request<Array<OrderRes>>('get', `${this.basePath}/api/orders/all`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * getOrderById
   *
   * @param orderId orderId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getOrderByIdUsingGET(orderId: number, observe?: 'body', reportProgress?: boolean): Observable<OrderRes>;
  public getOrderByIdUsingGET(orderId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderRes>>;
  public getOrderByIdUsingGET(orderId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderRes>>;
  public getOrderByIdUsingGET(orderId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (orderId === null || orderId === undefined) {
      throw new Error('Required parameter orderId was null or undefined when calling getOrderByIdUsingGET.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

    return this.httpClient.request<OrderRes>('get', `${this.basePath}/api/orders/${encodeURIComponent(String(orderId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
    }

}
