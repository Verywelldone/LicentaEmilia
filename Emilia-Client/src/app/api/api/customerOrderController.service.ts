/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CustomerOrder } from '../model/customerOrder';
import { OrderDetails } from '../model/orderDetails';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CustomerOrderControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * changeOrderDetails
     * 
     * @param orderId orderId
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changeOrderDetailsUsingPUT(orderId: number, body?: OrderDetails, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public changeOrderDetailsUsingPUT(orderId: number, body?: OrderDetails, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public changeOrderDetailsUsingPUT(orderId: number, body?: OrderDetails, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public changeOrderDetailsUsingPUT(orderId: number, body?: OrderDetails, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling changeOrderDetailsUsingPUT.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('put',`${this.basePath}/api/orders/order/${encodeURIComponent(String(orderId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * changeOrderStatus
     * 
     * @param orderId orderId
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changeOrderStatusUsingPUT(orderId: number, body?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public changeOrderStatusUsingPUT(orderId: number, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public changeOrderStatusUsingPUT(orderId: number, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public changeOrderStatusUsingPUT(orderId: number, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling changeOrderStatusUsingPUT.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('put',`${this.basePath}/api/orders/${encodeURIComponent(String(orderId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteOrder
     * 
     * @param orderId orderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrderUsingDELETE(orderId: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public deleteOrderUsingDELETE(orderId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public deleteOrderUsingDELETE(orderId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public deleteOrderUsingDELETE(orderId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling deleteOrderUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('delete',`${this.basePath}/api/orders/${encodeURIComponent(String(orderId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllCustomerOrders
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllCustomerOrdersUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<CustomerOrder>>;
    public getAllCustomerOrdersUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CustomerOrder>>>;
    public getAllCustomerOrdersUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CustomerOrder>>>;
    public getAllCustomerOrdersUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CustomerOrder>>('get',`${this.basePath}/api/orders/all`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllOrdersByCustomerId
     * 
     * @param customerId customerId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllOrdersByCustomerIdUsingGET(customerId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<CustomerOrder>>;
    public getAllOrdersByCustomerIdUsingGET(customerId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CustomerOrder>>>;
    public getAllOrdersByCustomerIdUsingGET(customerId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CustomerOrder>>>;
    public getAllOrdersByCustomerIdUsingGET(customerId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling getAllOrdersByCustomerIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CustomerOrder>>('get',`${this.basePath}/api/orders/customer/${encodeURIComponent(String(customerId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllOrdersByOrderStatus
     * 
     * @param orderStatus orderStatus
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllOrdersByOrderStatusUsingGET(orderStatus: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CustomerOrder>>;
    public getAllOrdersByOrderStatusUsingGET(orderStatus: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CustomerOrder>>>;
    public getAllOrdersByOrderStatusUsingGET(orderStatus: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CustomerOrder>>>;
    public getAllOrdersByOrderStatusUsingGET(orderStatus: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderStatus === null || orderStatus === undefined) {
            throw new Error('Required parameter orderStatus was null or undefined when calling getAllOrdersByOrderStatusUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CustomerOrder>>('get',`${this.basePath}/api/orders/status/${encodeURIComponent(String(orderStatus))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getOne
     * 
     * @param orderId orderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOneUsingGET(orderId: number, observe?: 'body', reportProgress?: boolean): Observable<CustomerOrder>;
    public getOneUsingGET(orderId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CustomerOrder>>;
    public getOneUsingGET(orderId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CustomerOrder>>;
    public getOneUsingGET(orderId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getOneUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CustomerOrder>('get',`${this.basePath}/api/orders/${encodeURIComponent(String(orderId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
